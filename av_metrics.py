# -*- coding: utf-8 -*-
"""AV_Metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mothMo1IM_F0vNBAFnnBx5DBNBCy3WHp
"""

!git clone https://github.com/farragoan/AVBenchmarking

import pandas as pd
import numpy as np
import re
from statistics import mean, median
import time 
from dateutil import parser
import matplotlib.pyplot as plt

"""System IP: 192.168.1.3. So, we'll look for packets that are delivered at this destination and take up packets coming from server that constitutes major chunk of the traffic"""

### function to calculate inter_packet_arrival, upload_payload, download_payload
def calculate(m_inter_packet_arrival, m_upload_payload, m_download_payload, m_bandwidth, range_list, role, platform):
  counter = 0
  # col_list = []
  for num in range_list:
    print(num)
    if role == 'r':
      data = pd.read_csv("AVBenchmarking/Receiver/Test"+str(num)+".csv",encoding = "ISO-8859-1")
    if role == 's':
      data = pd.read_csv("AVBenchmarking/Sender/test"+str(num)+".csv",encoding = "ISO-8859-1")
    # data = pd.read_csv("AVproject/Test"+str(num)+".csv")
    # ip_addr_temp = '192.168.1.3'
    # ip_addr_temp = '2001:4860:4864:5::1d'
    # data = pd.read_csv("/Test"+str(num)+".csv")
    # print(data.head())
    server_ip = data['Source'].value_counts().idxmax()
    ip_addr_temp = data['Destination'].value_counts().idxmax()
    if platform[counter] == 't' and num == 106 and role == 'r':
      temp = server_ip
      server_ip = ip_addr_temp
      ip_addr_temp = temp
    if role == 'r':
      temp = server_ip
      server_ip = ip_addr_temp
      ip_addr_temp = temp
    print(server_ip,ip_addr_temp)
    # server_id = data[data['Destination'] == ip_addr_temp]['Source'][data['Protocol'] == 'UDP'].value_counts().idxmax()
    # upload payload
    upload_data = data[data['Destination'] == server_ip][data['Source'] == ip_addr_temp][data['Protocol']=='UDP']
    print(upload_data.head())
    if role == 'r':
      datetime_start = parser.parse(upload_data['Time'].iloc[0])
      datetime_end = parser.parse(upload_data['Time'].iloc[-1])
    else:
      datetime_start = upload_data['Time'].iloc[0]
      datetime_end = upload_data['Time'].iloc[-1]
    # total_time = datetime_end - datetime_start
    total_payload = 0
    if platform[counter] != 'z':
      for payload in upload_data['Info']:
        payload_up = re.sub('.*=','',payload)
        payload_up = payload_up.replace('[Malformed Packet]','')
        total_payload += int(payload_up)
    else:
      for payload in upload_data['Length']:
        # payload_up = re.sub('.*=','',payload)
        # payload_up = payload_up.replace('[Malformed Packet]','')
        total_payload += int(payload)-13
    # if role == 'r':
    #   total_payload /= total_time.seconds
    # else:
    #   total_payload /= total_time
    m_upload_payload.append(total_payload)

    # #download payload
    download_data = data[data['Destination'] == ip_addr_temp][data['Source'] == server_ip][data['Protocol']=='UDP']
    if role == 'r':
      datetime_start = parser.parse(download_data['Time'].iloc[0])
      datetime_end = parser.parse(download_data['Time'].iloc[-1])
    else:
      datetime_start = upload_data['Time'].iloc[0]
      datetime_end = upload_data['Time'].iloc[-1]
    total_time = datetime_end - datetime_start
    total_payload = 0
    if platform[counter] != 'z':
      for payload in download_data['Info']:
        payload_down = re.sub('.*=','',payload)
        payload_down = payload_down.replace('[Malformed Packet]','')
        # print(payload_down)
        total_payload += int(payload_down)
    else:
      for payload in download_data['Length']:
        # payload_down = re.sub('.*=','',payload)
        # payload_down = payload_down.replace('[Malformed Packet]','')
        # print(payload_down)
        total_payload += int(payload)-13
    # if role == 'r':
    #   total_payload /= total_time.seconds
    # else:
    #   total_payload /= total_time
    m_download_payload.append(total_payload)

    #interpacket_arrival
    #Uses download_data
    if role == 'r':
      datetime_obj = parser.parse(download_data['Time'].iloc[0])
    else:
      datetime_obj = download_data['Time'].iloc[0]
    packet_arrival_wrt_request = []
    ref=datetime_obj
    for time in download_data['Time']:
      if role == 'r':
        curr = parser.parse(time)
      else:
        curr = time
      timedelta= curr-ref
      # if platform[counter] == 't':
        # print(timedelta)
      if role == 'r':
        packet_arrival_wrt_request.append(timedelta.microseconds)
      else:
        packet_arrival_wrt_request.append(timedelta)
      ref = curr
    
    packet_arrival_wrt_request = packet_arrival_wrt_request[1:]
    m_inter_packet_arrival.append(mean(packet_arrival_wrt_request))

    #bandwidth
    bandwidth_values = []
    index_val = 0
    start_time = 0
    packet_length = 0
    flag = 0
    bandwidth_values.append(0)
    check_diff_time = 10
    for index,row in upload_data.iterrows():
      if flag == 0:
        if role == 'r':
          start_time = parser.parse(row['Time'])
        else:
          start_time = row['Time']
        packet_length = row['Length']
        flag = 1
        bandwidth_values[index_val]+=packet_length
      else:
        if role == 'r':
          current_time = parser.parse(row['Time'])
        else:
          current_time = row['Time']
        # print(current_time-start_time)
        packet_length = row['Length']
        if ((current_time-start_time).seconds)<check_diff_time:
        # if ((current_time-start_time))<check_diff_time:
          # print((current_time-start_time).seconds)
          bandwidth_values[index_val]+=packet_length
        else:
          # print("here")
          bandwidth_values[index_val] = (bandwidth_values[index_val]/1024)/10
          index_val+=1
          start_time = current_time
          bandwidth_values.append(packet_length)
      # if flag != 0
      #   print(start_time,current_time)

    m_bandwidth.append(bandwidth_values)

      


    

    counter+=1

  return m_inter_packet_arrival, m_upload_payload, m_download_payload, m_bandwidth

inter_packet_arrival = []
upload_payload = []
download_payload = []
bandwidth = []

# inter_packet_arrival, upload_payload, download_payload = calculate(inter_packet_arrival, 
                                                                  #  upload_payload, download_payload,list([2,7]))

inter_packet_arrival, upload_payload, download_payload, bandwidth = calculate(inter_packet_arrival,upload_payload, download_payload, bandwidth,[106],'r',['m'])
# print(inter_packet_arrival[1])
###

#Test1=nomic,nocam
#Test2=mic,nocam
#Test3=mic,cam
#Test4=mic,cam,blurred

## Camera
#Inter-Packet Arrival
build_plot([''],inter_packet_arrival[0],'Inter packet arrival')
build_plot([''],(download_payload[0]/1024)/1024,'Download payload')
build_plot([''],(upload_payload[0]/1024)/1024,'Upload payload')

# def build_plot(legendx, legendy, title, color = 'blue'):
# build_plot2([''], [inter_packet_arrival[0]],[inter_packet_arrival[1]],
#            'Meet', 'Teams',  'Inter-Packet Arrival',"Inter Packet Arrival Comparison w.r.t. Meet and Teams in microseconds")
# # build_plot2([''], [inter_packet_arrival[2]],[inter_packet_arrival[3]],
# #            'Test3', 'Test4',  'Inter-Packet Arrival',"Inter Packet Arrival Comparison w.r.t. Test3 and Test4")

# #Upload Payload
# build_plot2([''], [(upload_payload[0]/1024)/1024],[(upload_payload[1]/1024)/1024],
#            'Meet', 'Teams',  'Upload Payload'," Upload Payload Comparison w.r.t. Meet and Teams in MB")
# # build_plot2([''], [upload_payload[2]],[upload_payload[3]],
# #            'Test3', 'Test4',  'Upload Payload'," Upload Payload Comparison w.r.t. Test3 and Test4")

# #Download Payload
# build_plot2([''], [(download_payload[0]/1024)/1024],[(download_payload[1]/1024)/1024],
#            'Meet', 'Teams',  'Download Payload'," Download Payload Comparison w.r.t. Meet and Teams in MB")

# #Bandwidth
# build_line_plot('Time interval = 10sec',bandwidth[0],bandwidth[1],'Meet','Teams','Bandwdith KBps')

#def build_line_plot(labelx,legend1,legend2,label1,label2,labely):
# build_plot2([''], [download_payload[2]],[download_payload[3]],
#            'Test3', 'Test4',  'Download Payload'," Download Payload Comparison w.r.t. Test3 and Test4")

inter_packet_arrival, upload_payload, download_payload, bandwidth = calculate(inter_packet_arrival,upload_payload, download_payload, bandwidth,[106],'r',['t'])
build_plot([''],inter_packet_arrival[1],'Inter packet arrival')
build_plot([''],(download_payload[1]/1024)/1024,'Download payload')
build_plot([''],(upload_payload[1]/1024)/1024,'Upload payload')

build_line_plot('Time interval = 10sec',bandwidth[0],bandwidth[1],'Meet','Teams','Bandwdith KBps')

# def build_plot(legendx, legendy, title, color = 'blue'):
# build_plot2([''], [inter_packet_arrival[0]],[inter_packet_arrival[1]],
#            'Meet', 'Teams',  'Inter-Packet Arrival',"Inter Packet Arrival Comparison w.r.t. Meet and Teams in microseconds")
# # build_plot2([''], [inter_packet_arrival[2]],[inter_packet_arrival[3]],
# #            'Test3', 'Test4',  'Inter-Packet Arrival',"Inter Packet Arrival Comparison w.r.t. Test3 and Test4")

# #Upload Payload
# build_plot2([''], [(upload_payload[0]/1024)/1024],[(upload_payload[1]/1024)/1024],
#            'Meet', 'Teams',  'Upload Payload'," Upload Payload Comparison w.r.t. Meet and Teams in MB")
# # build_plot2([''], [upload_payload[2]],[upload_payload[3]],
# #            'Test3', 'Test4',  'Upload Payload'," Upload Payload Comparison w.r.t. Test3 and Test4")

# #Download Payload
# build_plot2([''], [(download_payload[0]/1024)/1024],[(download_payload[1]/1024)/1024],
#            'Meet', 'Teams',  'Download Payload'," Download Payload Comparison w.r.t. Meet and Teams in MB")

# #Bandwidth
# build_line_plot('Time interval = 10sec',bandwidth[0],bandwidth[1],'Meet','Teams','Bandwdith KBps')

#def build_line_plot(labelx,legend1,legend2,label1,label2,labely):
# build_plot2([''], [download_payload[2]],[download_payload[3]],
#            'Test3', 'Test4',  'Download Payload'," Download Payload Comparison w.r.t. Test3 and Test4")

build_line_plot('Time interval = 10sec',bandwidth[0],bandwidth[1],'Teams Sender','Teams Receiver','Bandwdith KBps')

#Bandwidth
print(bandwidth[0])
build_line_plot('Time interval = 10sec',bandwidth[0],bandwidth[1],'Meet','Teams','Bandwdith KBps')

def calculate_bandwidth(file_number):
  range_val = pd.Series([1,2,3,5])
  data = pd.read_csv("/Test"+str(file_number)+".csv").iloc[:,range_val]
  data_required = data[data['Source'] == '18.157.243.175'][data['Destination'] == '192.168.29.226']
  final_data = data_required.iloc[:,pd.Series([0,3])]
  # souce ip = 18.157.243.175
  # dest ip = 192.168.29.226
  print(final_data.tail())
  bandwidth_values = [] #bandwidth values every 6 seconds
  start_time = -1
  band_index = -1
  next_time1 = -1
  next_time2 = -1
  for index,row in final_data.iterrows():
    packet_time = float(row['Time'][-9:])
    packet_length = row['Length']
    if start_time == -1:
      start_time = packet_time
      next_time1 = packet_time+6
      next_time2 = (packet_time+6)%60
      band_index+=1
      bandwidth_values.append(packet_length)
      continue
    if packet_time <= next_time1 or packet_time <= next_time2:
      bandwidth_values[band_index]+=packet_length
    else:
      next_time1 = packet_time+6
      next_time2 = (packet_time+6)%60
      band_index+=1
      bandwidth_values.append(packet_length)
  print(bandwidth_values)
  counter = 0
  for value in bandwidth_values:
    bandwidth_values[counter] = (value/1024)/6
    counter+=1
  print(bandwidth_values)
  plt.plot(range(9),bandwidth_values[:-1])
  plt.ylabel("Bandwidth in Kbps")
  plt.xlabel("TimeInterval = 6sec")
  plt.show()
calculate_bandwidth(1)

"""Bandwidth code"""

### Barplot for only one legend
def build_plot(legendx, legendy, title, color = 'blue'):
  plt.bar(legendx, legendy, color = color, width = 0.3) 
  # plt.xlabel("labelx") 
  # plt.ylabel("labely") 
  plt.title(title) 
  plt.show()

### Barplot for 2 legends
def build_plot2(labelx, legend1, legend2, label1, label2, labely, title ):
  x = np.arange(len(labelx))  # the label locations
  width = 0.35  # the width of the bars

  fig, ax = plt.subplots()
  rects1 = ax.bar(x - width/2, legend1, width, label=label1)
  rects2 = ax.bar(x + width/2, legend2, width, label=label2)

  # Add some text for labels, title and custom x-axis tick labels, etc.
  ax.set_ylabel(labely)
  ax.set_title(title)
  ax.set_xticks(x)
  ax.set_xticklabels(labelx)
  ax.legend()
  fig.tight_layout()
  plt.show()

### Barplot for 3 legends
def build_plot3(labelx, legend1, legend2, legend3, label1, label2, label3, labely, title ):
  x = np.arange(len(labelx))  # the label locations
  width = 0.25  # the width of the bars

  fig, ax = plt.subplots()
  rects1 = ax.bar(x - width, legend1, width, label=label1)
  rects2 = ax.bar(x , legend2, width, label=label2)
  rects3 = ax.bar(x + width, legend3, width, label=label3)

  # Add some text for labels, title and custom x-axis tick labels, etc.
  ax.set_ylabel(labely)
  ax.set_title(title)
  ax.set_xticks(x)
  ax.set_xticklabels(labelx)
  ax.legend()
  fig.tight_layout()
  plt.show()

def build_line_plot(labelx,legend1,legend2,label1,label2,labely):
  plt.plot(range(len(legend1)-1),legend1[:-1],label = label1)
  plt.plot(range(len(legend2)-1),legend2[:-1], label = label2)
  plt.xlabel(labelx)
  plt.ylabel(labely)
  plt.title("Bandwidth value every 10 secs")
  plt.legend()
  plt.show()